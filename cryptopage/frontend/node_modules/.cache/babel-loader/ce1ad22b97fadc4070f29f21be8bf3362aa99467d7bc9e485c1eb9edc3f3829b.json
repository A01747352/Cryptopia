{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,BarElement,ArcElement,Title,Tooltip,Legend}from'chart.js';import AnalyticsService from'../../services/analytics-service';// Componentes existentes\nimport AgeDistribution from'./AgeDistribution';import GenderDistribution from'./GenderDistribution';import RetentionChart from'./RetentionChart';import SessionsCard from'./SessionsCard';import RevenueCard from'./RevenueCard';import QuestionsCard from'./QuestionsCard';// Nuevos componentes\nimport AverageAccuracyCard from'./AverageAccuracyCard';import ActiveUsersCard from'./ActiveUsersCard';import TopPowerUpsCard from'./TopPowerUpsCard';import UserRankingCard from'./UserRankingCard';import TradingStatsCard from'./TradingStatsCard';import TknsByDayCard from'./TknsByDayCard';import TopCryptocurrenciesCard from'./TopCryptocurrenciesCard';import MostFailedQuestionsCard from'./MostFailedQuestionsCard';import'./Dashboard.css';// Registrar componentes de Chart.js\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,BarElement,ArcElement,Title,Tooltip,Legend);const Dashboard=()=>{const[loading,setLoading]=useState(true);const[dashboardData,setDashboardData]=useState(null);const[triviaStats,setTriviaStats]=useState(null);const[retentionData,setRetentionData]=useState(null);// Estados para los nuevos datos\nconst[averageAccuracy,setAverageAccuracy]=useState(null);const[activeUsers,setActiveUsers]=useState(null);const[topPowerUps,setTopPowerUps]=useState(null);const[userRanking,setUserRanking]=useState(null);const[tradingStats,setTradingStats]=useState(null);const[tknsByDay,setTknsByDay]=useState(null);const[topCryptos,setTopCryptos]=useState(null);const[failedQuestions,setFailedQuestions]=useState(null);useEffect(()=>{const fetchData=async()=>{try{// Cargar datos existentes\nconst[dashboardRes,triviaRes,retentionRes,// Nuevos endpoints\naccuracyRes,activeUsersRes,powerUpsRes,rankingRes,tradingRes,tknsRes,cryptosRes,failedQuestionsRes]=await Promise.all([// Endpoints existentes\nAnalyticsService.getDashboardData(),AnalyticsService.getTriviaStats(),AnalyticsService.getRetentionData(),// Nuevos endpoints\nAnalyticsService.getAverageAccuracy(),AnalyticsService.getActiveUsersByDay(),AnalyticsService.getTopPowerUps(),AnalyticsService.getUserRanking(),AnalyticsService.getTradingStats(),AnalyticsService.getTknsByDay(),AnalyticsService.getTopCryptocurrencies(),AnalyticsService.getMostFailedQuestions()]);// Establecer datos existentes\nsetDashboardData(dashboardRes);setTriviaStats(triviaRes);setRetentionData(retentionRes);// Establecer nuevos datos\nsetAverageAccuracy(accuracyRes.promedioAciertos);setActiveUsers(activeUsersRes);setTopPowerUps(powerUpsRes);setUserRanking(rankingRes);setTradingStats(tradingRes);setTknsByDay(tknsRes);setTopCryptos(cryptosRes);setFailedQuestions(failedQuestionsRes);setLoading(false);}catch(error){console.error('Error fetching dashboard data:',error);setLoading(false);}};fetchData();},[]);if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Cargando...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-grid\",children:[/*#__PURE__*/_jsx(AgeDistribution,{data:dashboardData===null||dashboardData===void 0?void 0:dashboardData.edad}),/*#__PURE__*/_jsx(GenderDistribution,{data:dashboardData===null||dashboardData===void 0?void 0:dashboardData.genero}),/*#__PURE__*/_jsx(RetentionChart,{data:retentionData})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-grid\",children:[/*#__PURE__*/_jsx(SessionsCard,{sessionsCount:dashboardData===null||dashboardData===void 0?void 0:dashboardData.sesiones}),/*#__PURE__*/_jsx(RevenueCard,{revenue:dashboardData===null||dashboardData===void 0?void 0:dashboardData.ingresos}),/*#__PURE__*/_jsx(QuestionsCard,{triviaStats:triviaStats})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-grid\",children:[/*#__PURE__*/_jsx(AverageAccuracyCard,{accuracy:averageAccuracy}),/*#__PURE__*/_jsx(ActiveUsersCard,{data:activeUsers}),/*#__PURE__*/_jsx(TopPowerUpsCard,{data:topPowerUps})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-grid\",children:[/*#__PURE__*/_jsx(UserRankingCard,{data:userRanking}),/*#__PURE__*/_jsx(TradingStatsCard,{data:tradingStats}),/*#__PURE__*/_jsx(TknsByDayCard,{data:tknsByDay})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-grid\",children:[/*#__PURE__*/_jsx(TopCryptocurrenciesCard,{data:topCryptos}),/*#__PURE__*/_jsx(MostFailedQuestionsCard,{data:failedQuestions})]})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","AnalyticsService","AgeDistribution","GenderDistribution","RetentionChart","SessionsCard","RevenueCard","QuestionsCard","AverageAccuracyCard","ActiveUsersCard","TopPowerUpsCard","UserRankingCard","TradingStatsCard","TknsByDayCard","TopCryptocurrenciesCard","MostFailedQuestionsCard","jsx","_jsx","jsxs","_jsxs","register","Dashboard","loading","setLoading","dashboardData","setDashboardData","triviaStats","setTriviaStats","retentionData","setRetentionData","averageAccuracy","setAverageAccuracy","activeUsers","setActiveUsers","topPowerUps","setTopPowerUps","userRanking","setUserRanking","tradingStats","setTradingStats","tknsByDay","setTknsByDay","topCryptos","setTopCryptos","failedQuestions","setFailedQuestions","fetchData","dashboardRes","triviaRes","retentionRes","accuracyRes","activeUsersRes","powerUpsRes","rankingRes","tradingRes","tknsRes","cryptosRes","failedQuestionsRes","Promise","all","getDashboardData","getTriviaStats","getRetentionData","getAverageAccuracy","getActiveUsersByDay","getTopPowerUps","getUserRanking","getTradingStats","getTknsByDay","getTopCryptocurrencies","getMostFailedQuestions","promedioAciertos","error","console","className","children","data","edad","genero","sessionsCount","sesiones","revenue","ingresos","accuracy"],"sources":["/Users/santiserrano/Cryptopia/cryptopage/frontend/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Chart as ChartJS, \n  CategoryScale, \n  LinearScale, \n  PointElement, \n  LineElement,\n  BarElement,\n  ArcElement,\n  Title, \n  Tooltip, \n  Legend \n} from 'chart.js';\nimport AnalyticsService from '../../services/analytics-service';\n\n// Componentes existentes\nimport AgeDistribution from './AgeDistribution';\nimport GenderDistribution from './GenderDistribution';\nimport RetentionChart from './RetentionChart';\nimport SessionsCard from './SessionsCard';\nimport RevenueCard from './RevenueCard';\nimport QuestionsCard from './QuestionsCard';\n\n// Nuevos componentes\nimport AverageAccuracyCard from './AverageAccuracyCard';\nimport ActiveUsersCard from './ActiveUsersCard';\nimport TopPowerUpsCard from './TopPowerUpsCard';\nimport UserRankingCard from './UserRankingCard';\nimport TradingStatsCard from './TradingStatsCard';\nimport TknsByDayCard from './TknsByDayCard';\nimport TopCryptocurrenciesCard from './TopCryptocurrenciesCard';\nimport MostFailedQuestionsCard from './MostFailedQuestionsCard';\n\nimport './Dashboard.css';\n\n// Registrar componentes de Chart.js\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [dashboardData, setDashboardData] = useState(null);\n  const [triviaStats, setTriviaStats] = useState(null);\n  const [retentionData, setRetentionData] = useState(null);\n  \n  // Estados para los nuevos datos\n  const [averageAccuracy, setAverageAccuracy] = useState(null);\n  const [activeUsers, setActiveUsers] = useState(null);\n  const [topPowerUps, setTopPowerUps] = useState(null);\n  const [userRanking, setUserRanking] = useState(null);\n  const [tradingStats, setTradingStats] = useState(null);\n  const [tknsByDay, setTknsByDay] = useState(null);\n  const [topCryptos, setTopCryptos] = useState(null);\n  const [failedQuestions, setFailedQuestions] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Cargar datos existentes\n        const [\n          dashboardRes, \n          triviaRes, \n          retentionRes,\n          // Nuevos endpoints\n          accuracyRes,\n          activeUsersRes,\n          powerUpsRes,\n          rankingRes,\n          tradingRes,\n          tknsRes,\n          cryptosRes,\n          failedQuestionsRes\n        ] = await Promise.all([\n          // Endpoints existentes\n          AnalyticsService.getDashboardData(),\n          AnalyticsService.getTriviaStats(),\n          AnalyticsService.getRetentionData(),\n          // Nuevos endpoints\n          AnalyticsService.getAverageAccuracy(),\n          AnalyticsService.getActiveUsersByDay(),\n          AnalyticsService.getTopPowerUps(),\n          AnalyticsService.getUserRanking(),\n          AnalyticsService.getTradingStats(),\n          AnalyticsService.getTknsByDay(),\n          AnalyticsService.getTopCryptocurrencies(),\n          AnalyticsService.getMostFailedQuestions()\n        ]);\n\n        // Establecer datos existentes\n        setDashboardData(dashboardRes);\n        setTriviaStats(triviaRes);\n        setRetentionData(retentionRes);\n        \n        // Establecer nuevos datos\n        setAverageAccuracy(accuracyRes.promedioAciertos);\n        setActiveUsers(activeUsersRes);\n        setTopPowerUps(powerUpsRes);\n        setUserRanking(rankingRes);\n        setTradingStats(tradingRes);\n        setTknsByDay(tknsRes);\n        setTopCryptos(cryptosRes);\n        setFailedQuestions(failedQuestionsRes);\n        \n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <div className=\"loading\">Cargando...</div>;\n  }\n\n  return (\n    <div className=\"dashboard\">\n      {/* Primera fila - Cards originales */}\n      <div className=\"dashboard-grid\">\n        <AgeDistribution data={dashboardData?.edad} />\n        <GenderDistribution data={dashboardData?.genero} />\n        <RetentionChart data={retentionData} />\n      </div>\n      \n      {/* Segunda fila - Más cards originales */}\n      <div className=\"dashboard-grid\">\n        <SessionsCard sessionsCount={dashboardData?.sesiones} />\n        <RevenueCard revenue={dashboardData?.ingresos} />\n        <QuestionsCard triviaStats={triviaStats} />\n      </div>\n      \n      {/* Tercera fila - Nuevas cards */}\n      <div className=\"dashboard-grid\">\n        <AverageAccuracyCard accuracy={averageAccuracy} />\n        <ActiveUsersCard data={activeUsers} />\n        <TopPowerUpsCard data={topPowerUps} />\n      </div>\n      \n      {/* Cuarta fila - Más nuevas cards */}\n      <div className=\"dashboard-grid\">\n        <UserRankingCard data={userRanking} />\n        <TradingStatsCard data={tradingStats} />\n        <TknsByDayCard data={tknsByDay} />\n      </div>\n      \n      {/* Quinta fila - Últimas nuevas cards */}\n      <div className=\"dashboard-grid\">\n        <TopCryptocurrenciesCard data={topCryptos} />\n        <MostFailedQuestionsCard data={failedQuestions} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}